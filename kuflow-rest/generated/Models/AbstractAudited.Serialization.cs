// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Kuflow.Rest.Models
{
    public partial class AbstractAudited : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("objectType");
            writer.WriteStringValue(ObjectType.ToSerialString());
            if (Optional.IsDefined(CreatedBy))
            {
                writer.WritePropertyName("createdBy");
                writer.WriteStringValue(CreatedBy.Value);
            }
            if (Optional.IsDefined(CreatedAt))
            {
                writer.WritePropertyName("createdAt");
                writer.WriteStringValue(CreatedAt.Value, "O");
            }
            if (Optional.IsDefined(LastModifiedBy))
            {
                writer.WritePropertyName("lastModifiedBy");
                writer.WriteStringValue(LastModifiedBy.Value);
            }
            if (Optional.IsDefined(LastModifiedAt))
            {
                writer.WritePropertyName("lastModifiedAt");
                writer.WriteStringValue(LastModifiedAt.Value, "O");
            }
            writer.WriteEndObject();
        }

        internal static AbstractAudited DeserializeAbstractAudited(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("objectType", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "PROCESS_PAGE_ITEM": return ProcessPageItem.DeserializeProcessPageItem(element);
                    case "Process": return Process.DeserializeProcess(element);
                    case "TASK_PAGE_ITEM": return TaskPageItem.DeserializeTaskPageItem(element);
                    case "Task": return Task.DeserializeTask(element);
                    case "Authentication": return Authentication.DeserializeAuthentication(element);
                }
            }
            return UnknownAbstractAudited.DeserializeUnknownAbstractAudited(element);
        }
    }
}
