// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace KuFlow.Rest.Models
{
    /// <summary> The WorkerCreateParams. </summary>
    public partial class WorkerCreateParams
    {
        /// <summary> Initializes a new instance of <see cref="WorkerCreateParams"/>. </summary>
        /// <param name="identity"></param>
        /// <param name="taskQueue"></param>
        /// <param name="hostname"></param>
        /// <param name="ip"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="identity"/>, <paramref name="taskQueue"/>, <paramref name="hostname"/> or <paramref name="ip"/> is null. </exception>
        public WorkerCreateParams(string identity, string taskQueue, string hostname, string ip)
        {
            Argument.AssertNotNull(identity, nameof(identity));
            Argument.AssertNotNull(taskQueue, nameof(taskQueue));
            Argument.AssertNotNull(hostname, nameof(hostname));
            Argument.AssertNotNull(ip, nameof(ip));

            Identity = identity;
            TaskQueue = taskQueue;
            WorkflowTypes = new ChangeTrackingList<string>();
            ActivityTypes = new ChangeTrackingList<string>();
            Hostname = hostname;
            Ip = ip;
            RobotIds = new ChangeTrackingList<Guid>();
        }

        /// <summary> Initializes a new instance of <see cref="WorkerCreateParams"/>. </summary>
        /// <param name="identity"></param>
        /// <param name="taskQueue"></param>
        /// <param name="workflowTypes"></param>
        /// <param name="activityTypes"></param>
        /// <param name="hostname"></param>
        /// <param name="ip"></param>
        /// <param name="installationId"> Installation Id. </param>
        /// <param name="robotIds"> Robot Ids that this worker implements. </param>
        /// <param name="tenantId"> Tenant ID. </param>
        internal WorkerCreateParams(string identity, string taskQueue, IList<string> workflowTypes, IList<string> activityTypes, string hostname, string ip, Guid? installationId, IList<Guid> robotIds, Guid? tenantId)
        {
            Identity = identity;
            TaskQueue = taskQueue;
            WorkflowTypes = workflowTypes;
            ActivityTypes = activityTypes;
            Hostname = hostname;
            Ip = ip;
            InstallationId = installationId;
            RobotIds = robotIds;
            TenantId = tenantId;
        }

        /// <summary> Gets the identity. </summary>
        public string Identity { get; }
        /// <summary> Gets the task queue. </summary>
        public string TaskQueue { get; }
        /// <summary> Gets the workflow types. </summary>
        public IList<string> WorkflowTypes { get; }
        /// <summary> Gets the activity types. </summary>
        public IList<string> ActivityTypes { get; }
        /// <summary> Gets the hostname. </summary>
        public string Hostname { get; }
        /// <summary> Gets the ip. </summary>
        public string Ip { get; }
        /// <summary> Installation Id. </summary>
        public Guid? InstallationId { get; set; }
        /// <summary> Robot Ids that this worker implements. </summary>
        public IList<Guid> RobotIds { get; }
        /// <summary> Tenant ID. </summary>
        public Guid? TenantId { get; set; }
    }
}
