// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace KuFlow.Rest.Models
{
    /// <summary> Default error. </summary>
    internal partial class DefaultError
    {
        /// <summary> Initializes a new instance of <see cref="DefaultError"/>. </summary>
        /// <param name="timestamp"> Timestamp indicating when the error happened. </param>
        /// <param name="status"> HTTP Status. </param>
        /// <param name="message"> Message Status. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="message"/> is null. </exception>
        internal DefaultError(DateTimeOffset timestamp, int status, string message)
        {
            Argument.AssertNotNull(message, nameof(message));

            Timestamp = timestamp;
            Status = status;
            Message = message;
            Errors = new ChangeTrackingList<DefaultErrorInfo>();
        }

        /// <summary> Initializes a new instance of <see cref="DefaultError"/>. </summary>
        /// <param name="timestamp"> Timestamp indicating when the error happened. </param>
        /// <param name="status"> HTTP Status. </param>
        /// <param name="message"> Message Status. </param>
        /// <param name="errors"> Related error information. </param>
        internal DefaultError(DateTimeOffset timestamp, int status, string message, IReadOnlyList<DefaultErrorInfo> errors)
        {
            Timestamp = timestamp;
            Status = status;
            Message = message;
            Errors = errors;
        }

        /// <summary> Timestamp indicating when the error happened. </summary>
        public DateTimeOffset Timestamp { get; }
        /// <summary> HTTP Status. </summary>
        public int Status { get; }
        /// <summary> Message Status. </summary>
        public string Message { get; }
        /// <summary> Related error information. </summary>
        public IReadOnlyList<DefaultErrorInfo> Errors { get; }
    }
}
