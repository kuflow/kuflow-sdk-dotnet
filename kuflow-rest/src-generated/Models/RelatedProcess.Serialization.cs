// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace KuFlow.Rest.Models
{
    public partial class RelatedProcess : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Incoming))
            {
                writer.WritePropertyName("incoming"u8);
                writer.WriteStartArray();
                foreach (var item in Incoming)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Outcoming))
            {
                writer.WritePropertyName("outcoming"u8);
                writer.WriteStartArray();
                foreach (var item in Outcoming)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static RelatedProcess DeserializeRelatedProcess(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<Guid>> incoming = default;
            Optional<IList<Guid>> outcoming = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("incoming"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Guid> array = new List<Guid>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetGuid());
                    }
                    incoming = array;
                    continue;
                }
                if (property.NameEquals("outcoming"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Guid> array = new List<Guid>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetGuid());
                    }
                    outcoming = array;
                    continue;
                }
            }
            return new RelatedProcess(Optional.ToList(incoming), Optional.ToList(outcoming));
        }
    }
}
