// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace KuFlow.Rest.Models
{
    /// <summary> Robot asset platform architecture. </summary>
    public readonly partial struct RobotAssetArchitecture : IEquatable<RobotAssetArchitecture>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RobotAssetArchitecture"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RobotAssetArchitecture(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string X8632Value = "X86_32";
        private const string X8664Value = "X86_64";

        /// <summary> X86_32. </summary>
        public static RobotAssetArchitecture X8632 { get; } = new RobotAssetArchitecture(X8632Value);
        /// <summary> X86_64. </summary>
        public static RobotAssetArchitecture X8664 { get; } = new RobotAssetArchitecture(X8664Value);
        /// <summary> Determines if two <see cref="RobotAssetArchitecture"/> values are the same. </summary>
        public static bool operator ==(RobotAssetArchitecture left, RobotAssetArchitecture right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RobotAssetArchitecture"/> values are not the same. </summary>
        public static bool operator !=(RobotAssetArchitecture left, RobotAssetArchitecture right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="RobotAssetArchitecture"/>. </summary>
        public static implicit operator RobotAssetArchitecture(string value) => new RobotAssetArchitecture(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RobotAssetArchitecture other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RobotAssetArchitecture other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
