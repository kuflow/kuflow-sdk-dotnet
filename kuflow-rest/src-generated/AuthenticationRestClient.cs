// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using KuFlow.Rest.Models;

namespace KuFlow.Rest
{
  internal partial class AuthenticationRestClient
  {
    private readonly HttpPipeline _pipeline;
    private readonly Uri _endpoint;

    /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
    internal ClientDiagnostics ClientDiagnostics { get; }

    /// <summary> Initializes a new instance of AuthenticationRestClient. </summary>
    /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
    /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
    /// <param name="endpoint"> server parameter. </param>
    /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
    public AuthenticationRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
    {
      ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
      _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
      _endpoint = endpoint ?? new Uri("https://api.kuflow.com/v2024-06-14");
    }

    internal HttpMessage CreateCreateAuthenticationRequest(AuthenticationCreateParams authenticationCreateParams)
    {
      var message = _pipeline.CreateMessage();
      var request = message.Request;
      request.Method = RequestMethod.Post;
      var uri = new RawRequestUriBuilder();
      uri.Reset(_endpoint);
      uri.AppendPath("/authentications", false);
      request.Uri = uri;
      request.Headers.Add("Accept", "application/json");
      request.Headers.Add("Content-Type", "application/json");
      var content = new Utf8JsonRequestContent();
      content.JsonWriter.WriteObjectValue(authenticationCreateParams);
      request.Content = content;
      return message;
    }

    /// <summary> Create an authentication for the current principal. </summary>
    /// <param name="authenticationCreateParams"> Authentication to be created. </param>
    /// <param name="cancellationToken"> The cancellation token to use. </param>
    /// <exception cref="ArgumentNullException"> <paramref name="authenticationCreateParams"/> is null. </exception>
    public async Task<Response<Authentication>> CreateAuthenticationAsync(
      AuthenticationCreateParams authenticationCreateParams,
      CancellationToken cancellationToken = default
    )
    {
      if (authenticationCreateParams == null)
      {
        throw new ArgumentNullException(nameof(authenticationCreateParams));
      }

      using var message = CreateCreateAuthenticationRequest(authenticationCreateParams);
      await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
      switch (message.Response.Status)
      {
        case 200:
        {
          Authentication value = default;
          using var document = await JsonDocument
            .ParseAsync(message.Response.ContentStream, default, cancellationToken)
            .ConfigureAwait(false);
          value = Authentication.DeserializeAuthentication(document.RootElement);
          return Response.FromValue(value, message.Response);
        }
        default:
          throw new RequestFailedException(message.Response);
      }
    }

    /// <summary> Create an authentication for the current principal. </summary>
    /// <param name="authenticationCreateParams"> Authentication to be created. </param>
    /// <param name="cancellationToken"> The cancellation token to use. </param>
    /// <exception cref="ArgumentNullException"> <paramref name="authenticationCreateParams"/> is null. </exception>
    public Response<Authentication> CreateAuthentication(
      AuthenticationCreateParams authenticationCreateParams,
      CancellationToken cancellationToken = default
    )
    {
      if (authenticationCreateParams == null)
      {
        throw new ArgumentNullException(nameof(authenticationCreateParams));
      }

      using var message = CreateCreateAuthenticationRequest(authenticationCreateParams);
      _pipeline.Send(message, cancellationToken);
      switch (message.Response.Status)
      {
        case 200:
        {
          Authentication value = default;
          using var document = JsonDocument.Parse(message.Response.ContentStream);
          value = Authentication.DeserializeAuthentication(document.RootElement);
          return Response.FromValue(value, message.Response);
        }
        default:
          throw new RequestFailedException(message.Response);
      }
    }
  }
}
