// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using KuFlow.Rest.Models;

namespace KuFlow.Rest
{
  /// <summary> The Group service client. </summary>
  public partial class GroupClient
  {
    private readonly ClientDiagnostics _clientDiagnostics;
    private readonly HttpPipeline _pipeline;
    internal GroupRestClient RestClient { get; }

    /// <summary> Initializes a new instance of GroupClient for mocking. </summary>
    protected GroupClient() { }

    /// <summary> Initializes a new instance of GroupClient. </summary>
    /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
    /// <param name="endpoint"> server parameter. </param>
    /// <param name="options"> The options for configuring the client. </param>
    public GroupClient(TokenCredential credential, Uri endpoint = null, KuFlowRestClientOptions options = null)
    {
      if (credential == null)
      {
        throw new ArgumentNullException(nameof(credential));
      }
      endpoint ??= new Uri("https://api.kuflow.com/v2024-06-14");

      options ??= new KuFlowRestClientOptions();
      _clientDiagnostics = new ClientDiagnostics(options);
      string[] scopes = { };
      _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
      RestClient = new GroupRestClient(_clientDiagnostics, _pipeline, endpoint);
    }

    /// <summary> Initializes a new instance of GroupClient. </summary>
    /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
    /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
    /// <param name="endpoint"> server parameter. </param>
    /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
    internal GroupClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
    {
      RestClient = new GroupRestClient(clientDiagnostics, pipeline, endpoint);
      _clientDiagnostics = clientDiagnostics;
      _pipeline = pipeline;
    }

    /// <summary> Find all accessible Groups. </summary>
    /// <param name="size"> The number of records returned within a single API call. </param>
    /// <param name="page"> The page number of the current page in the returned records, 0 is the first page. </param>
    /// <param name="sort">
    /// Sorting criteria in the format: property{,asc|desc}. Example: createdAt,desc
    ///
    /// Default sort order is ascending. Multiple sort criteria are supported.
    ///
    /// Please refer to the method description for supported properties.
    ///
    /// </param>
    /// <param name="tenantId"> Filter by tenantId. </param>
    /// <param name="principalId"> Filter by principalId. </param>
    /// <param name="groupId"> Filter by group ids. </param>
    /// <param name="cancellationToken"> The cancellation token to use. </param>
    /// <remarks>
    /// List all the Groups that have been created and the used credentials has access.
    ///
    /// Available sort query values: id, name
    ///
    /// </remarks>
    internal virtual async Task<Response<GroupPage>> FindGroupsAsync(
      int? size = null,
      int? page = null,
      IEnumerable<string> sort = null,
      IEnumerable<Guid> tenantId = null,
      Guid? principalId = null,
      IEnumerable<Guid> groupId = null,
      CancellationToken cancellationToken = default
    )
    {
      using var scope = _clientDiagnostics.CreateScope("GroupClient.FindGroups");
      scope.Start();
      try
      {
        return await RestClient
          .FindGroupsAsync(size, page, sort, tenantId, principalId, groupId, cancellationToken)
          .ConfigureAwait(false);
      }
      catch (Exception e)
      {
        scope.Failed(e);
        throw;
      }
    }

    /// <summary> Find all accessible Groups. </summary>
    /// <param name="size"> The number of records returned within a single API call. </param>
    /// <param name="page"> The page number of the current page in the returned records, 0 is the first page. </param>
    /// <param name="sort">
    /// Sorting criteria in the format: property{,asc|desc}. Example: createdAt,desc
    ///
    /// Default sort order is ascending. Multiple sort criteria are supported.
    ///
    /// Please refer to the method description for supported properties.
    ///
    /// </param>
    /// <param name="tenantId"> Filter by tenantId. </param>
    /// <param name="principalId"> Filter by principalId. </param>
    /// <param name="groupId"> Filter by group ids. </param>
    /// <param name="cancellationToken"> The cancellation token to use. </param>
    /// <remarks>
    /// List all the Groups that have been created and the used credentials has access.
    ///
    /// Available sort query values: id, name
    ///
    /// </remarks>
    internal virtual Response<GroupPage> FindGroups(
      int? size = null,
      int? page = null,
      IEnumerable<string> sort = null,
      IEnumerable<Guid> tenantId = null,
      Guid? principalId = null,
      IEnumerable<Guid> groupId = null,
      CancellationToken cancellationToken = default
    )
    {
      using var scope = _clientDiagnostics.CreateScope("GroupClient.FindGroups");
      scope.Start();
      try
      {
        return RestClient.FindGroups(size, page, sort, tenantId, principalId, groupId, cancellationToken);
      }
      catch (Exception e)
      {
        scope.Failed(e);
        throw;
      }
    }
  }
}
