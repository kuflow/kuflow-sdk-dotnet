// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using KuFlow.Rest.Models;

namespace KuFlow.Rest
{
  /// <summary> The Kms service client. </summary>
  public partial class KmsClient
  {
    private readonly ClientDiagnostics _clientDiagnostics;
    private readonly HttpPipeline _pipeline;
    internal KmsRestClient RestClient { get; }

    /// <summary> Initializes a new instance of KmsClient for mocking. </summary>
    protected KmsClient() { }

    /// <summary> Initializes a new instance of KmsClient. </summary>
    /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
    /// <param name="endpoint"> server parameter. </param>
    /// <param name="options"> The options for configuring the client. </param>
    public KmsClient(TokenCredential credential, Uri endpoint = null, KuFlowRestClientOptions options = null)
    {
      if (credential == null)
      {
        throw new ArgumentNullException(nameof(credential));
      }
      endpoint ??= new Uri("https://api.kuflow.com/v2024-06-14");

      options ??= new KuFlowRestClientOptions();
      _clientDiagnostics = new ClientDiagnostics(options);
      string[] scopes = { };
      _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
      RestClient = new KmsRestClient(_clientDiagnostics, _pipeline, endpoint);
    }

    /// <summary> Initializes a new instance of KmsClient. </summary>
    /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
    /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
    /// <param name="endpoint"> server parameter. </param>
    /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
    internal KmsClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
    {
      RestClient = new KmsRestClient(clientDiagnostics, pipeline, endpoint);
      _clientDiagnostics = clientDiagnostics;
      _pipeline = pipeline;
    }

    /// <summary> Get the requested key id. </summary>
    /// <param name="keyId"> The resource ID. </param>
    /// <param name="cancellationToken"> The cancellation token to use. </param>
    public virtual async Task<Response<KmsKey>> RetrieveKmsKeyAsync(
      string keyId,
      CancellationToken cancellationToken = default
    )
    {
      using var scope = _clientDiagnostics.CreateScope("KmsClient.RetrieveKmsKey");
      scope.Start();
      try
      {
        return await RestClient.RetrieveKmsKeyAsync(keyId, cancellationToken).ConfigureAwait(false);
      }
      catch (Exception e)
      {
        scope.Failed(e);
        throw;
      }
    }

    /// <summary> Get the requested key id. </summary>
    /// <param name="keyId"> The resource ID. </param>
    /// <param name="cancellationToken"> The cancellation token to use. </param>
    public virtual Response<KmsKey> RetrieveKmsKey(string keyId, CancellationToken cancellationToken = default)
    {
      using var scope = _clientDiagnostics.CreateScope("KmsClient.RetrieveKmsKey");
      scope.Start();
      try
      {
        return RestClient.RetrieveKmsKey(keyId, cancellationToken);
      }
      catch (Exception e)
      {
        scope.Failed(e);
        throw;
      }
    }
  }
}
