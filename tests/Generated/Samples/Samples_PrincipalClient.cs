// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Kuflow.Rest.Samples
{
  public class Samples_PrincipalClient
  {
    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_FindPrincipals()
    {
      var client = new PrincipalClient();

      Response response = client.FindPrincipals();

      JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
      Console.WriteLine(result.GetProperty("content")[0].ToString());
      Console.WriteLine(result.GetProperty("objectType").ToString());
      Console.WriteLine(result.GetProperty("metadata").GetProperty("size").ToString());
      Console.WriteLine(result.GetProperty("metadata").GetProperty("page").ToString());
      Console.WriteLine(result.GetProperty("metadata").GetProperty("totalElements").ToString());
      Console.WriteLine(result.GetProperty("metadata").GetProperty("totalPages").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_FindPrincipals_AllParameters()
    {
      var client = new PrincipalClient();

      Response response = client.FindPrincipals(
        1234,
        1234,
        new string[] { "<sort>" },
        "<type>",
        new Guid[] { Guid.NewGuid() },
        new RequestContext()
      );

      JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
      Console.WriteLine(result.GetProperty("content")[0].GetProperty("id").ToString());
      Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
      Console.WriteLine(result.GetProperty("content")[0].GetProperty("name").ToString());
      Console.WriteLine(result.GetProperty("content")[0].GetProperty("user").GetProperty("id").ToString());
      Console.WriteLine(result.GetProperty("content")[0].GetProperty("user").GetProperty("email").ToString());
      Console.WriteLine(result.GetProperty("content")[0].GetProperty("application").GetProperty("id").ToString());
      Console.WriteLine(result.GetProperty("objectType").ToString());
      Console.WriteLine(result.GetProperty("metadata").GetProperty("size").ToString());
      Console.WriteLine(result.GetProperty("metadata").GetProperty("page").ToString());
      Console.WriteLine(result.GetProperty("metadata").GetProperty("totalElements").ToString());
      Console.WriteLine(result.GetProperty("metadata").GetProperty("totalPages").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_FindPrincipals_Async()
    {
      var client = new PrincipalClient();

      Response response = await client.FindPrincipalsAsync();

      JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
      Console.WriteLine(result.GetProperty("content")[0].ToString());
      Console.WriteLine(result.GetProperty("objectType").ToString());
      Console.WriteLine(result.GetProperty("metadata").GetProperty("size").ToString());
      Console.WriteLine(result.GetProperty("metadata").GetProperty("page").ToString());
      Console.WriteLine(result.GetProperty("metadata").GetProperty("totalElements").ToString());
      Console.WriteLine(result.GetProperty("metadata").GetProperty("totalPages").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_FindPrincipals_AllParameters_Async()
    {
      var client = new PrincipalClient();

      Response response = await client.FindPrincipalsAsync(
        1234,
        1234,
        new string[] { "<sort>" },
        "<type>",
        new Guid[] { Guid.NewGuid() },
        new RequestContext()
      );

      JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
      Console.WriteLine(result.GetProperty("content")[0].GetProperty("id").ToString());
      Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
      Console.WriteLine(result.GetProperty("content")[0].GetProperty("name").ToString());
      Console.WriteLine(result.GetProperty("content")[0].GetProperty("user").GetProperty("id").ToString());
      Console.WriteLine(result.GetProperty("content")[0].GetProperty("user").GetProperty("email").ToString());
      Console.WriteLine(result.GetProperty("content")[0].GetProperty("application").GetProperty("id").ToString());
      Console.WriteLine(result.GetProperty("objectType").ToString());
      Console.WriteLine(result.GetProperty("metadata").GetProperty("size").ToString());
      Console.WriteLine(result.GetProperty("metadata").GetProperty("page").ToString());
      Console.WriteLine(result.GetProperty("metadata").GetProperty("totalElements").ToString());
      Console.WriteLine(result.GetProperty("metadata").GetProperty("totalPages").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RetrievePrincipal()
    {
      var client = new PrincipalClient();

      Response response = client.RetrievePrincipal(Guid.NewGuid());

      JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
      Console.WriteLine(result.ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RetrievePrincipal_AllParameters()
    {
      var client = new PrincipalClient();

      Response response = client.RetrievePrincipal(Guid.NewGuid(), new RequestContext());

      JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
      Console.WriteLine(result.GetProperty("id").ToString());
      Console.WriteLine(result.GetProperty("type").ToString());
      Console.WriteLine(result.GetProperty("name").ToString());
      Console.WriteLine(result.GetProperty("user").GetProperty("id").ToString());
      Console.WriteLine(result.GetProperty("user").GetProperty("email").ToString());
      Console.WriteLine(result.GetProperty("application").GetProperty("id").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RetrievePrincipal_Async()
    {
      var client = new PrincipalClient();

      Response response = await client.RetrievePrincipalAsync(Guid.NewGuid());

      JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
      Console.WriteLine(result.ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RetrievePrincipal_AllParameters_Async()
    {
      var client = new PrincipalClient();

      Response response = await client.RetrievePrincipalAsync(Guid.NewGuid(), new RequestContext());

      JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
      Console.WriteLine(result.GetProperty("id").ToString());
      Console.WriteLine(result.GetProperty("type").ToString());
      Console.WriteLine(result.GetProperty("name").ToString());
      Console.WriteLine(result.GetProperty("user").GetProperty("id").ToString());
      Console.WriteLine(result.GetProperty("user").GetProperty("email").ToString());
      Console.WriteLine(result.GetProperty("application").GetProperty("id").ToString());
    }
  }
}
